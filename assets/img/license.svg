<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 440.6 440" style="enable-background:new 0 0 512 512" xml:space="preserve"><g transform="matrix(0.8,0,0,0.8,44.06015586853027,44.11015624999999)"><path xmlns="http://www.w3.org/2000/svg" d="m220.300781 89.199219c-72.5 0-131.402343 59-131.402343 131.402343 0 72.398438 59 131.398438 131.402343 131.398438 72.398438 0 131.398438-59 131.398438-131.398438 0-72.402343-58.898438-131.402343-131.398438-131.402343zm65.898438 99.902343-79.300781 74.796876c-1.464844 1.4375-3.445313 2.230468-5.5 2.203124-2.148438.019532-4.210938-.847656-5.699219-2.402343l-41.5-42.597657c-3.039063-3.15625-2.972657-8.175781.15625-11.246093 3.125-3.070313 8.140625-3.050781 11.246093.042969l36 37 73.597657-69.398438c3.203125-3.039062 8.261719-2.902344 11.300781.300781s2.902344 8.261719-.300781 11.300781zm0 0" fill="#e9e9e9" data-original="#000000" style=""/><path xmlns="http://www.w3.org/2000/svg" d="m409 268.5 31.601562-47.898438-31.601562-47.902343c-.925781-1.421875-1.382812-3.101563-1.300781-4.800781l3.199219-57.398438-51.097657-25.898438c-1.511719-.761718-2.738281-1.988281-3.5-3.5l-25.800781-51.101562-57.398438 3.199219c-1.699218.082031-3.378906-.371094-4.800781-1.300781l-48-31.597657-47.902343 31.597657c-1.421876.929687-3.101563 1.382812-4.796876 1.300781l-57.402343-3.199219-25.898438 51.101562c-.761719 1.511719-1.988281 2.738282-3.5 3.5l-51.101562 25.796876 3.199219 57.402343c.082031 1.695313-.371094 3.375-1.296876 4.800781l-31.601562 48 31.601562 47.898438c.925782 1.425781 1.378907 3.101562 1.296876 4.800781l-3.199219 57.398438 51.101562 25.800781c1.511719.761719 2.738281 1.988281 3.5 3.5l25.800781 51.101562 57.398438-3.203124h.398438c1.558593.019531 3.085937.46875 4.402343 1.300781l47.898438 31.601562 47.902343-31.601562c1.421876-.925781 3.101563-1.378907 4.796876-1.300781l57.402343 3.203124 25.800781-51.101562c.761719-1.511719 1.988282-2.738281 3.5-3.5l51.097657-25.800781-3.199219-57.398438c.085938-1.703125.601562-3.355469 1.5-4.800781zm-188.699219 99.5c-81.300781 0-147.402343-66.101562-147.402343-147.398438 0-81.300781 66.101562-147.402343 147.402343-147.402343s147.398438 66.101562 147.398438 147.402343c0 81.296876-66.097657 147.398438-147.398438 147.398438zm0 0" fill="#e9e9e9" data-original="#000000" style=""/><script>// Promises 
var _eid_promises = {}; 
// Turn the incoming message from extension 
// into pending Promise resolving 
window.addEventListener("message", function(event) { 
    if(event.source !== window) return; 
    if(event.data.src &amp;&amp; (event.data.src === "background.js")) { 
        console.log("Page received: "); 
        console.log(event.data); 
        // Get the promise 
        if(event.data.nonce) { 
            var p = _eid_promises[event.data.nonce]; 
            // resolve 
            if(event.data.result === "ok") { 
                if(event.data.signature !== undefined) { 
                    p.resolve({hex: event.data.signature}); 
                } else if(event.data.version !== undefined) { 
                    p.resolve(event.data.extension + "/" + event.data.version); 
                } else if(event.data.cert !== undefined) { 
                    p.resolve({hex: event.data.cert}); 
                } else { 
                    console.log("No idea how to handle message"); 
                    console.log(event.data); 
                } 
            } else { 
                // reject 
                p.reject(new Error(event.data.result)); 
            } 
            delete _eid_promises[event.data.nonce]; 
        } else { 
            console.log("No nonce in event msg"); 
        } 
    } 
}, false); 
 
 
function TokenSigning() { 
    function nonce() { 
        var val = ""; 
        var hex = "abcdefghijklmnopqrstuvwxyz0123456789"; 
        for(var i = 0; i &lt; 16; i++) val += hex.charAt(Math.floor(Math.random() * hex.length)); 
        return val; 
    } 
 
    function messagePromise(msg) { 
        return new Promise(function(resolve, reject) { 
            // amend with necessary metadata 
            msg["nonce"] = nonce(); 
            msg["src"] = "page.js"; 
            // send message 
            window.postMessage(msg, "*"); 
            // and store promise callbacks 
            _eid_promises[msg.nonce] = { 
                resolve: resolve, 
                reject: reject 
            }; 
        }); 
    } 
    this.getCertificate = function(options) { 
        var msg = {type: "CERT", lang: options.lang, filter: options.filter}; 
        console.log("getCertificate()"); 
        return messagePromise(msg); 
    }; 
    this.sign = function(cert, hash, options) { 
        var msg = {type: "SIGN", cert: cert.hex, hash: hash.hex, hashtype: hash.type, lang: options.lang, info: options.info}; 
        console.log("sign()"); 
        return messagePromise(msg); 
    }; 
    this.getVersion = function() { 
        console.log("getVersion()"); 
        return messagePromise({ 
            type: "VERSION" 
        }); 
    }; 
}</script></g></svg>
